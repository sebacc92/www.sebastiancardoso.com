import { component$ } from '@builder.io/qwik';
import { type DocumentHead, Link } from '@builder.io/qwik-city';
import { Button } from '~/components/ui';
import { LuArrowLeft } from '@qwikest/icons/lucide';

export default component$(() => {
    return (
        <main class="mt-8 mb-24 px-4">
            <Button look="link" class="mb-8">
                <Link href="/blog" class="flex items-center">
                    <LuArrowLeft class="h-5 w-5" />
                    <span>Volver al Blog</span>
                </Link>
            </Button>
            <article class="prose lg:prose-xl">
                <h1 class="text-4xl font-bold mb-4">
                    üöÄ Dominando Next.js: SSR, SPA y SSG Sin Complicaciones
                </h1>
                <p>
                    Next.js se ha consolidado como uno de los frameworks m√°s potentes y vers√°tiles para el desarrollo de aplicaciones web en React. Ofrece una combinaci√≥n √∫nica de caracter√≠sticas que facilitan la creaci√≥n de aplicaciones r√°pidas, escalables y optimizadas para SEO. En este art√≠culo, exploraremos en profundidad las diferencias entre <strong>SSR</strong> (Server-Side Rendering), <strong>SPA</strong> (Single Page Applications) y <strong>SSG</strong> (Static Site Generation) con Next.js. ¬°Comencemos! üåü
                </p>

                <h2 class="text-2xl font-semibold mt-8 mb-4">¬øQu√© es Next.js? üßê</h2>
                <p>
                    Next.js es un framework de React que facilita la creaci√≥n de aplicaciones web con renderizado del lado del servidor, generaci√≥n de sitios est√°ticos y m√°s. Proporciona una experiencia de desarrollo optimizada, manejo de rutas, optimizaci√≥n de im√°genes y muchas otras caracter√≠sticas listas para usar.
                </p>
                <p>
                    Su flexibilidad permite a los desarrolladores elegir entre diferentes estrategias de renderizado seg√∫n las necesidades de la aplicaci√≥n, lo que lo hace ideal para una amplia gama de proyectos, desde blogs personales hasta aplicaciones empresariales de gran escala.
                </p>

                <h2 class="text-2xl font-semibold mt-8 mb-4">Server-Side Rendering (SSR) üñ•Ô∏è</h2>
                <p>
                    El <strong>Server-Side Rendering (SSR)</strong> implica que el contenido de la aplicaci√≥n se renderiza en el servidor antes de enviarlo al cliente. Esto mejora el rendimiento percibido y es beneficioso para el SEO, ya que los motores de b√∫squeda pueden indexar f√°cilmente el contenido renderizado.
                </p>
                <h3 class="text-xl font-semibold mt-6 mb-3">Ventajas de SSR</h3>
                <ul class="list-disc list-inside">
                    <li>
                        <strong>Mejor SEO</strong>: El contenido est√° disponible inmediatamente para los motores de b√∫squeda.
                    </li>
                    <li>
                        <strong>Tiempo hasta el primer byte (TTFB) r√°pido</strong>: El usuario recibe el contenido m√°s r√°pido, mejorando la experiencia inicial.
                    </li>
                    <li>
                        <strong>Contenido Din√°mico</strong>: Ideal para aplicaciones donde el contenido cambia con frecuencia y necesita reflejarse al instante.
                    </li>
                </ul>
                <h3 class="text-xl font-semibold mt-6 mb-3">Implementando SSR en Next.js</h3>
                <p>
                    En Next.js, para implementar SSR y obtener datos en el servidor, puedes usar la funci√≥n <code class="bg-gray-200 px-1 rounded">getServerSideProps</code>.
                </p>
                <pre class="bg-gray-100 p-4 rounded-md overflow-x-auto">
                    <code class="language-js">
                        {`export async function getServerSideProps(context) {
  const res = await fetch('https://api.example.com/data');
  const data = await res.json();
  return { props: { data } };
}

function Page({ data }) {
  return <div>{JSON.stringify(data)}</div>;
}

export default Page;`}
                    </code>
                </pre>
                <p>
                    En este ejemplo, los datos se obtienen en el servidor y se pasan al componente como props, asegurando que el contenido est√© disponible en el momento de la carga de la p√°gina.
                </p>

                <h2 class="text-2xl font-semibold mt-8 mb-4">Static Site Generation (SSG) üóÇÔ∏è</h2>
                <p>
                    La <strong>Generaci√≥n de Sitios Est√°ticos (SSG)</strong> crea p√°ginas HTML est√°ticas en tiempo de compilaci√≥n. Esto resulta en sitios r√°pidos y escalables, ideales para contenido que no cambia frecuentemente. Una vez generadas, las p√°ginas pueden ser servidas r√°pidamente a los usuarios sin necesidad de renderizado adicional.
                </p>
                <h3 class="text-xl font-semibold mt-6 mb-3">Ventajas de SSG</h3>
                <ul class="list-disc list-inside">
                    <li>
                        <strong>Alto Rendimiento</strong>: Las p√°ginas est√°ticas se sirven r√°pidamente, mejorando la velocidad del sitio.
                    </li>
                    <li>
                        <strong>Escalabilidad</strong>: Menor carga en el servidor, ya que las p√°ginas son archivos est√°ticos.
                    </li>
                    <li>
                        <strong>Seguridad</strong>: Menor superficie de ataque al no tener l√≥gica del lado del servidor en tiempo de ejecuci√≥n.
                    </li>
                </ul>
                <h3 class="text-xl font-semibold mt-6 mb-3">Implementando SSG en Next.js</h3>
                <p>
                    Para generar p√°ginas est√°ticas, utilizamos la funci√≥n <code class="bg-gray-200 px-1 rounded">getStaticProps</code>. Si tienes rutas din√°micas, tambi√©n puedes usar <code class="bg-gray-200 px-1 rounded">getStaticPaths</code>.
                </p>
                <pre class="bg-gray-100 p-4 rounded-md overflow-x-auto">
                    <code class="language-js">
                        {`export async function getStaticProps() {
  const res = await fetch('https://api.example.com/data');
  const data = await res.json();
  return { props: { data } };
}

function Page({ data }) {
  return <div>{JSON.stringify(data)}</div>;
}

export default Page;`}
                    </code>
                </pre>
                <p>
                    Los datos se obtienen en tiempo de compilaci√≥n, y la p√°gina se genera est√°ticamente.
                </p>
                <h3 class="text-xl font-semibold mt-6 mb-3">Ejemplo Real: Sitio Web Construido con SSG</h3>
                <p>
                    Un ejemplo pr√°ctico de SSG es el sitio web que constru√≠ personalmente: <a href="https://erconsrl.com.ar/" target="_blank" rel="noopener noreferrer" class="text-blue-500 hover:underline">erconsrl.com.ar</a>. Utilic√© Next.js para generar un sitio est√°tico que proporciona informaci√≥n sobre la empresa, sus servicios y proyectos. Al utilizar SSG, el sitio carga r√°pidamente y es f√°cilmente indexable por los motores de b√∫squeda, lo que mejora su visibilidad en l√≠nea.
                </p>

                <h2 class="text-2xl font-semibold mt-8 mb-4">Single Page Applications (SPA) üì±</h2>
                <p>
                    Las <strong>Aplicaciones de P√°gina √önica (SPA)</strong> cargan una sola p√°gina HTML y actualizan din√°micamente el contenido a medida que el usuario interact√∫a con la aplicaci√≥n, sin recargar toda la p√°gina. Esto proporciona una experiencia de usuario fluida y similar a una aplicaci√≥n de escritorio.
                </p>
                <h3 class="text-xl font-semibold mt-6 mb-3">Ventajas de SPA</h3>
                <ul class="list-disc list-inside">
                    <li>
                        <strong>Interactividad Mejorada</strong>: Transiciones suaves y experiencia de usuario m√°s din√°mica.
                    </li>
                    <li>
                        <strong>Menor Consumo de Ancho de Banda</strong>: Solo se cargan datos y vistas necesarias, no toda la p√°gina.
                    </li>
                    <li>
                        <strong>Desarrollo Modular</strong>: Facilitado por componentes reutilizables.
                    </li>
                </ul>
                <h3 class="text-xl font-semibold mt-6 mb-3">Implementando SPA en Next.js</h3>
                <p>
                    Aunque Next.js est√° optimizado para SSR y SSG, tambi√©n puede utilizarse para crear aplicaciones SPA. Al deshabilitar el renderizado del lado del servidor y cargar componentes √∫nicamente en el cliente, puedes crear una SPA con Next.js.
                </p>
                <p>
                    Sin embargo, para aplicaciones que no requieren SSR o SSG, y donde el SEO no es una prioridad, podr√≠as considerar utilizar Create React App o frameworks similares, ya que est√°n dise√±ados espec√≠ficamente para SPA.
                </p>

                <h2 class="text-2xl font-semibold mt-8 mb-4">Comparaci√≥n entre SSR, SSG y SPA üìù</h2>
                <p>
                    Comprender las diferencias entre SSR, SSG y SPA es crucial para elegir la estrategia adecuada para tu proyecto.
                </p>
                <table class="table-auto w-full text-left mt-4">
                    <thead>
                        <tr>
                            <th class="px-4 py-2">Estrategia</th>
                            <th class="px-4 py-2">Ventajas</th>
                            <th class="px-4 py-2">Desventajas</th>
                            <th class="px-4 py-2">Casos de Uso</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td class="border px-4 py-2">SSR</td>
                            <td class="border px-4 py-2">
                                - Mejor SEO<br />
                                - Contenido din√°mico actualizado en cada solicitud<br />
                                - R√°pido TTFB
                            </td>
                            <td class="border px-4 py-2">
                                - Mayor carga en el servidor<br />
                                - Tiempo de respuesta m√°s lento comparado con SSG
                            </td>
                            <td class="border px-4 py-2">
                                - E-commerce<br />
                                - Aplicaciones con contenido que cambia frecuentemente
                            </td>
                        </tr>
                        <tr class="bg-gray-100">
                            <td class="border px-4 py-2">SSG</td>
                            <td class="border px-4 py-2">
                                - Rendimiento excelente<br />
                                - Escalabilidad<br />
                                - Seguridad mejorada
                            </td>
                            <td class="border px-4 py-2">
                                - Contenido est√°tico<br />
                                - Requiere regeneraci√≥n para actualizar contenido
                            </td>
                            <td class="border px-4 py-2">
                                - Blogs<br />
                                - Documentaci√≥n<br />
                                - Sitios corporativos
                            </td>
                        </tr>
                        <tr>
                            <td class="border px-4 py-2">SPA</td>
                            <td class="border px-4 py-2">
                                - Experiencia de usuario fluida<br />
                                - Interactividad mejorada<br />
                                - Menos solicitudes al servidor
                            </td>
                            <td class="border px-4 py-2">
                                - SEO limitado<br />
                                - Tiempo de carga inicial m√°s largo
                            </td>
                            <td class="border px-4 py-2">
                                - Aplicaciones web complejas<br />
                                - Paneles de control<br />
                                - Herramientas internas
                            </td>
                        </tr>
                    </tbody>
                </table>

                <h2 class="text-2xl font-semibold mt-8 mb-4">Conclusi√≥n üéØ</h2>
                <p>
                    Next.js es una herramienta poderosa que te permite combinar diferentes estrategias de renderizado seg√∫n las necesidades de tu aplicaci√≥n. Comprender las diferencias entre <strong>SSR</strong>, <strong>SSG</strong> y <strong>SPA</strong> es esencial para tomar decisiones informadas que optimicen el rendimiento, la experiencia del usuario y el SEO.
                </p>
                <p>
                    Al dominar estas t√©cnicas y aplicarlas adecuadamente, estar√°s preparado para llevar tus proyectos al siguiente nivel. Ya sea que est√©s construyendo un sitio de contenido est√°tico, una aplicaci√≥n din√°mica o una plataforma interactiva, Next.js ofrece la flexibilidad y las herramientas necesarias para lograr tus objetivos. ¬°Atr√©vete a experimentar y descubre todo lo que Next.js tiene para ofrecer! üöÄ
                </p>

                <p>---</p>

                <p class="mt-8">
                    üí¨ <em>
                        ¬øTienes experiencias o consejos adicionales sobre Next.js? ¬°Comp√°rtelas en Twitter mencion√°ndome{' '}
                        <a
                            href="https://twitter.com/intent/tweet?text=Mis%20consejos%20sobre%20Next.js%20son...&hashtags=NextjsTips&via=sebacc92"
                            target="_blank"
                            rel="noopener noreferrer"
                            class="text-blue-500 hover:underline"
                        >
                            @sebacc92
                        </a>{' '}
                        y usando el hashtag{' '}
                        <a
                            href="https://twitter.com/intent/tweet?text=%23NextjsTips&hashtags=NextjsTips&via=sebacc92"
                            target="_blank"
                            rel="noopener noreferrer"
                            class="text-blue-500 hover:underline"
                        >
                            #NextjsTips
                        </a>
                        !
                    </em>
                </p>
            </article>
            <Button look="link" class="mt-8">
                <Link href="/blog" class="flex items-center">
                    <LuArrowLeft class="h-5 w-5" />
                    <span>Volver al Blog</span>
                </Link>
            </Button>
        </main>
    );
});

export const head: DocumentHead = {
    title: 'Dominando Next.js: SSR, SPA y SSG Sin Complicaciones',
};
