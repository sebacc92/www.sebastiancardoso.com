import { component$ } from '@builder.io/qwik';
import { Link, type DocumentHead } from '@builder.io/qwik-city';
import { LuArrowLeft } from '@qwikest/icons/lucide';
import { Button } from '~/components/ui';

export default component$(() => {
    return (
        <main class="mt-8 mx-auto max-w-3xl px-4">
            <Button look="link" class="mb-8">
                <Link href="/blog" class="flex items-center">
                    <LuArrowLeft class="h-5 w-5" />
                    <span>Volver al Blog</span>
                </Link>
            </Button>
            <article class="prose lg:prose-xl">
                <h1 class="text-4xl font-bold mb-4">
                    üèéÔ∏è Performance Web: C√≥mo Hacer que tu App Vuele
                </h1>
                <p>
                    En el mundo digital actual, la velocidad lo es todo. Los usuarios esperan que las aplicaciones web sean r√°pidas y responsivas. Una aplicaci√≥n lenta no solo frustra a los usuarios, sino que tambi√©n puede afectar negativamente al SEO y a la tasa de conversi√≥n. En este art√≠culo, exploraremos estrategias y t√©cnicas para optimizar el rendimiento de tu aplicaci√≥n web y hacer que vuele. ¬°Prep√°rate para acelerar! üöÄ
                </p>

                <h2 class="text-2xl font-semibold mt-8 mb-4">1. Optimizaci√≥n de Recursos üì¶</h2>
                <p>
                    Los recursos como im√°genes, scripts y estilos pueden ralentizar significativamente tu aplicaci√≥n si no se gestionan adecuadamente.
                </p>
                <h3 class="text-xl font-semibold mt-6 mb-3">1.1. Compresi√≥n de Im√°genes üñºÔ∏è</h3>
                <p>
                    Las im√°genes suelen ser los recursos m√°s pesados en una p√°gina web. Reducir su tama√±o sin comprometer la calidad es esencial.
                </p>
                <ul class="list-disc list-inside">
                    <li>
                        <strong>Usa formatos modernos</strong>: Formatos como <code class="bg-gray-200 px-1 rounded">WebP</code> y <code class="bg-gray-200 px-1 rounded">AVIF</code> ofrecen mejor compresi√≥n.
                    </li>
                    <li>
                        <strong>Herramientas de compresi√≥n</strong>: Utiliza herramientas como ImageOptim, TinyPNG o Squoosh para optimizar im√°genes.
                    </li>
                    <li>
                        <strong>Implementa im√°genes responsivas</strong>: Utiliza el atributo <code class="bg-gray-200 px-1 rounded">srcset</code> para servir im√°genes de diferentes resoluciones seg√∫n el dispositivo.
                    </li>
                </ul>
                <h3 class="text-xl font-semibold mt-6 mb-3">1.2. Minificaci√≥n y Concatenaci√≥n üìÑ</h3>
                <p>
                    Reducir el tama√±o de tus archivos CSS y JavaScript mejora los tiempos de carga.
                </p>
                <ul class="list-disc list-inside">
                    <li>
                        <strong>Minifica los archivos</strong>: Elimina espacios, comentarios y caracteres innecesarios.
                    </li>
                    <li>
                        <strong>Concatena archivos</strong>: Reduce el n√∫mero de solicitudes HTTP combinando archivos.
                    </li>
                    <li>
                        <strong>Utiliza herramientas de build</strong>: Webpack, Rollup o Parcel pueden automatizar este proceso.
                    </li>
                </ul>
                <h3 class="text-xl font-semibold mt-6 mb-3">1.3. Carga Diferida (Lazy Loading) üí§</h3>
                <p>
                    Cargar recursos solo cuando sean necesarios mejora el rendimiento inicial.
                </p>
                <p>Ejemplo de carga diferida de una imagen:</p>
                <pre class="bg-gray-100 p-4 rounded-md overflow-x-auto">
                    <code class="language-html">
                        {`<img src="imagen.webp" alt="Descripci√≥n de la imagen" loading="lazy" />`}
                    </code>
                </pre>
                <p>Implementaci√≥n de carga diferida en un componente React:</p>
                <pre class="bg-gray-100 p-4 rounded-md overflow-x-auto">
                    <code class="language-jsx">
                        {`const LazyComponent = React.lazy(() => import('./HeavyComponent'));

function App() {
  return (
    <Suspense fallback={<div>Cargando...</div>}>
      <LazyComponent />
    </Suspense>
  );
}`}
                    </code>
                </pre>

                <h2 class="text-2xl font-semibold mt-8 mb-4">2. Optimizaci√≥n del Rendimiento de JavaScript ‚öôÔ∏è</h2>
                <p>
                    El c√≥digo JavaScript puede ser una fuente importante de problemas de rendimiento si no se maneja adecuadamente.
                </p>
                <h3 class="text-xl font-semibold mt-6 mb-3">2.1. Evita el C√≥digo Bloqueante üöß</h3>
                <p>
                    El c√≥digo que bloquea el hilo principal puede causar tiempos de respuesta lentos.
                </p>
                <ul class="list-disc list-inside">
                    <li>
                        <strong>Usa <code class="bg-gray-200 px-1 rounded">async</code> y <code class="bg-gray-200 px-1 rounded">defer</code> en scripts</strong>: Permite que el navegador procese otros elementos mientras carga los scripts.
                    </li>
                    <li>
                        <strong>Divide el c√≥digo</strong>: Implementa code splitting para cargar solo lo necesario.
                    </li>
                </ul>
                <h3 class="text-xl font-semibold mt-6 mb-3">2.2. Eliminaci√≥n de C√≥digo Muerto üóëÔ∏è</h3>
                <p>
                    Elimina el c√≥digo que no se utiliza para reducir el tama√±o de los archivos.
                </p>
                <ul class="list-disc list-inside">
                    <li>
                        <strong>Herramientas como Tree Shaking</strong>: Webpack y Rollup pueden eliminar c√≥digo no utilizado autom√°ticamente.
                    </li>
                    <li>
                        <strong>Analiza tus dependencias</strong>: Evita importar librer√≠as enteras si solo necesitas una parte.
                    </li>
                </ul>
                <h3 class="text-xl font-semibold mt-6 mb-3">2.3. Uso Eficiente del DOM üß©</h3>
                <p>
                    Manipular el DOM es costoso; optimiza las interacciones con √©l.
                </p>
                <ul class="list-disc list-inside">
                    <li>
                        <strong>Agrupa actualizaciones</strong>: Realiza cambios en lotes para minimizar reflows y repaints.
                    </li>
                    <li>
                        <strong>Virtual DOM</strong>: Utiliza frameworks como React o Vue que optimizan las actualizaciones del DOM.
                    </li>
                    <li>
                        <strong>Web Workers</strong>: Desplaza tareas pesadas fuera del hilo principal.
                    </li>
                </ul>

                <h2 class="text-2xl font-semibold mt-8 mb-4">3. Mejora la Experiencia del Usuario üéØ</h2>
                <p>
                    La percepci√≥n de velocidad es tan importante como la velocidad real.
                </p>
                <h3 class="text-xl font-semibold mt-6 mb-3">3.1. Prioriza el Contenido por Encima del Doblez üìë</h3>
                <p>
                    Aseg√∫rate de que el contenido visible inicialmente cargue r√°pidamente.
                </p>
                <ul class="list-disc list-inside">
                    <li>
                        <strong>CSS cr√≠tico en l√≠nea</strong>: Incluye estilos esenciales directamente en el HTML.
                    </li>
                    <li>
                        <strong>Diferir CSS no cr√≠tico</strong>: Carga los estilos menos importantes de forma as√≠ncrona.
                    </li>
                    <li>
                        <strong>Preload y Prefetch</strong>: Indica al navegador qu√© recursos cargar con prioridad.
                    </li>
                </ul>
                <h3 class="text-xl font-semibold mt-6 mb-3">3.2. Utiliza Indicadores de Carga ‚è≥</h3>
                <p>
                    Proporciona feedback al usuario mientras se carga el contenido.
                </p>
                <ul class="list-disc list-inside">
                    <li>
                        <strong>Skeleton screens</strong>: Muestra marcadores de posici√≥n en lugar de un spinner.
                    </li>
                    <li>
                        <strong>Progress bars</strong>: Indica el progreso de la carga de manera visual.
                    </li>
                    <li>
                        <strong>Animaciones sutiles</strong>: Mant√©n al usuario comprometido durante la espera.
                    </li>
                </ul>
                <h3 class="text-xl font-semibold mt-6 mb-3">3.3. Evita los Saltos de Contenido üìå</h3>
                <p>
                    El Cumulative Layout Shift (CLS) afecta negativamente la experiencia del usuario.
                </p>
                <ul class="list-disc list-inside">
                    <li>
                        <strong>Reserva espacio para im√°genes y anuncios</strong>: Define las dimensiones para evitar cambios inesperados.
                    </li>
                    <li>
                        <strong>Evita la inserci√≥n tard√≠a de contenido</strong>: Planifica la estructura del DOM para cargar contenido en orden.
                    </li>
                    <li>
                        <strong>Utiliza fuentes locales</strong>: Reduce el retraso en la carga de fuentes externas.
                    </li>
                </ul>

                <h2 class="text-2xl font-semibold mt-8 mb-4">4. Implementa Cach√© y CDN üåê</h2>
                <p>
                    Utilizar mecanismos de cach√© y distribuci√≥n de contenido mejora significativamente la velocidad.
                </p>
                <h3 class="text-xl font-semibold mt-6 mb-3">4.1. Configura el Cach√© del Navegador üóÑÔ∏è</h3>
                <p>
                    Permite que el navegador almacene recursos para evitar descargas repetidas.
                </p>
                <ul class="list-disc list-inside">
                    <li>
                        <strong>Usa cabeceras de cach√©</strong>: Controla cu√°nto tiempo se deben almacenar los recursos.
                    </li>
                    <li>
                        <strong>Versiona tus archivos</strong>: Cambia el nombre de los archivos cuando se actualicen para forzar una recarga.
                    </li>
                    <li>
                        <strong>Implementa Service Workers</strong>: Para un control m√°s granular sobre el cach√©.
                    </li>
                </ul>
                <h3 class="text-xl font-semibold mt-6 mb-3">4.2. Utiliza una CDN üöÄ</h3>
                <p>
                    Una Red de Distribuci√≥n de Contenido acerca tus recursos al usuario.
                </p>
                <ul class="list-disc list-inside">
                    <li>
                        <strong>Reducci√≥n de latencia</strong>: Los servidores distribuidos entregan contenido m√°s r√°pido.
                    </li>
                    <li>
                        <strong>Escalabilidad</strong>: Maneja mejor el tr√°fico alto al distribuir la carga.
                    </li>
                    <li>
                        <strong>Seguridad Mejorada</strong>: Muchas CDN ofrecen protecci√≥n DDoS y certificados SSL.
                    </li>
                </ul>

                <h2 class="text-2xl font-semibold mt-8 mb-4">5. Monitoreo y An√°lisis üîç</h2>
                <p>
                    No puedes mejorar lo que no mides. Utiliza herramientas para analizar el rendimiento y detectar cuellos de botella.
                </p>
                <h3 class="text-xl font-semibold mt-6 mb-3">5.1. Herramientas de Desarrollo del Navegador üõ†Ô∏è</h3>
                <p>
                    Los navegadores modernos ofrecen herramientas integradas para analizar el rendimiento.
                </p>
                <ul class="list-disc list-inside">
                    <li>
                        <strong>Audit</strong>: Usa Lighthouse para obtener informes detallados.
                    </li>
                    <li>
                        <strong>Performance</strong>: Analiza el tiempo de carga y ejecuci√≥n de scripts.
                    </li>
                    <li>
                        <strong>Coverage</strong>: Identifica c√≥digo CSS y JavaScript no utilizado.
                    </li>
                </ul>
                <h3 class="text-xl font-semibold mt-6 mb-3">5.2. Servicios Externos üåê</h3>
                <p>
                    Herramientas como Google Analytics o New Relic proporcionan insights valiosos.
                </p>
                <ul class="list-disc list-inside">
                    <li>
                        <strong>Real User Monitoring (RUM)</strong>: Analiza el rendimiento desde la perspectiva del usuario real.
                    </li>
                    <li>
                        <strong>Alertas y Reportes</strong>: Configura alertas para problemas de rendimiento.
                    </li>
                    <li>
                        <strong>Heatmaps y Session Recordings</strong>: Comprende c√≥mo interact√∫an los usuarios con tu sitio.
                    </li>
                </ul>

                <h2 class="text-2xl font-semibold mt-8 mb-4">6. Optimizaci√≥n del Servidor üñ•Ô∏è</h2>
                <p>
                    No olvides que el backend tambi√©n juega un papel crucial en el rendimiento.
                </p>
                <ul class="list-disc list-inside">
                    <li>
                        <strong>Usa HTTP/2 o HTTP/3</strong>: Mejoran la velocidad de transferencia de datos.
                    </li>
                    <li>
                        <strong>Compresi√≥n Gzip/Brotli</strong>: Comprime los archivos antes de enviarlos.
                    </li>
                    <li>
                        <strong>Optimiza las consultas a la base de datos</strong>: Reduce el tiempo de respuesta del servidor.
                    </li>
                    <li>
                        <strong>Implementa cacheo en el servidor</strong>: Utiliza Redis o Memcached para almacenar en cach√© respuestas frecuentes.
                    </li>
                </ul>

                <h2 class="text-2xl font-semibold mt-8 mb-4">7. Adopta Buenas Pr√°cticas de C√≥digo üìù</h2>
                <p>
                    Un c√≥digo limpio y eficiente es la base de una aplicaci√≥n de alto rendimiento.
                </p>
                <ul class="list-disc list-inside">
                    <li>
                        <strong>Evita loops innecesarios</strong>: Reduce operaciones costosas.
                    </li>
                    <li>
                        <strong>Usa memoizaci√≥n</strong>: Almacena resultados de funciones costosas si se llaman con frecuencia.
                    </li>
                    <li>
                        <strong>Escribe c√≥digo as√≠ncrono</strong>: No bloquees el hilo principal.
                    </li>
                    <li>
                        <strong>Sigue est√°ndares de c√≥digo</strong>: Facilita el mantenimiento y la colaboraci√≥n.
                    </li>
                </ul>

                <h2 class="text-2xl font-semibold mt-8 mb-4">8. Optimizaci√≥n para Dispositivos M√≥viles üì±</h2>
                <p>
                    Cada vez m√°s usuarios acceden a internet desde dispositivos m√≥viles. Optimizar para m√≥viles es crucial.
                </p>
                <ul class="list-disc list-inside">
                    <li>
                        <strong>Dise√±o Responsive</strong>: Aseg√∫rate de que tu sitio se vea y funcione bien en todas las pantallas.
                    </li>
                    <li>
                        <strong>Optimiza el tiempo de carga</strong>: Las conexiones m√≥viles pueden ser m√°s lentas; minimiza los recursos necesarios.
                    </li>
                    <li>
                        <strong>Usa AMP (Accelerated Mobile Pages)</strong>: Mejora la velocidad en dispositivos m√≥viles con p√°ginas optimizadas.
                    </li>
                </ul>

                <h2 class="text-2xl font-semibold mt-8 mb-4">Conclusi√≥n üèÅ</h2>
                <p>
                    Optimizar el rendimiento web es un esfuerzo continuo que requiere atenci√≥n a los detalles y un enfoque integral. Al aplicar las t√©cnicas y estrategias mencionadas, puedes mejorar significativamente la velocidad y la experiencia del usuario en tu aplicaci√≥n. Recuerda que cada milisegundo cuenta. ¬°Es hora de poner en pr√°ctica estos consejos y hacer que tu app vuele! ü¶Ö
                </p>

                <p>---</p>

                <p class="mt-8">
                    üí¨{' '}
                    <em>
                        ¬øConoces otras t√©cnicas para mejorar el rendimiento web? ¬°Comp√°rtelas en Twitter mencion√°ndome{' '}
                        <a
                            href="https://twitter.com/intent/tweet?text=Mis%20consejos%20para%20mejorar%20el%20rendimiento%20web%20son...&hashtags=WebPerformance&via=sebacc92"
                            target="_blank"
                            rel="noopener noreferrer"
                            class="text-blue-500 hover:underline"
                        >
                            @sebacc92
                        </a>{' '}
                        y usando el hashtag{' '}
                        <a
                            href="https://twitter.com/intent/tweet?text=%23WebPerformance&hashtags=WebPerformance&via=sebacc92"
                            target="_blank"
                            rel="noopener noreferrer"
                            class="text-blue-500 hover:underline"
                        >
                            #WebPerformance
                        </a>
                        !
                    </em>
                </p>
            </article>
            <Button look="link" class="my-8">
                <Link href="/blog" class="flex items-center">
                    <LuArrowLeft class="h-5 w-5" />
                    <span>Volver al Blog</span>
                </Link>
            </Button>
        </main>
    );
});

export const head: DocumentHead = {
    title: 'Performance Web: C√≥mo Hacer que tu App Vuele',
};
