import { component$ } from '@builder.io/qwik';
import { Link, type DocumentHead } from '@builder.io/qwik-city';
import { LuArrowLeft } from '@qwikest/icons/lucide';
import { Button } from '~/components/ui';

export default component$(() => {
    return (
        <>
            <Button
                look="link"
                class="mt-8"
            >
                <Link
                    href="/blog"
                    class="flex items-center"
                >
                    <LuArrowLeft class="h-5 w-5" />
                    <span>Volver al Blog</span>
                </Link>
            </Button>
            <main class="mt-8 mb-24 mx-auto max-w-4xl">
                <article class="prose lg:prose-xl">
                    <h1 class="text-4xl font-bold mb-4">üöÄ Construyendo Interfaces Ultrarr√°pidas con Qwik y Tailwind</h1>
                    <p>
                        Si alguna vez has sentido que tus aplicaciones web podr√≠an ser m√°s r√°pidas, m√°s eficientes y ofrecer una mejor experiencia al usuario, est√°s en el lugar correcto. Hoy quiero compartir contigo mi experiencia con <strong>Qwik</strong>, un framework que est√° revolucionando la forma en que construimos interfaces de usuario, y c√≥mo combinarlo con <strong>Tailwind CSS</strong> puede llevar tus proyectos al siguiente nivel. üí°
                    </p>

                    <h2 class="text-2xl font-semibold mt-8 mb-4">¬øQu√© es Qwik y por qu√© deber√≠a importarte? ü§î</h2>
                    <p>
                        Imagina un framework que te permita crear aplicaciones web de alto rendimiento sin tener que preocuparte por la carga inicial de JavaScript. <strong>Qwik</strong>, creado por Mi≈°ko Hevery (s√≠, el mismo detr√°s de Angular), Adam Bradley y Manu Almeida, es esa herramienta. Su objetivo principal es reducir la carga y ejecuci√≥n de JavaScript al m√≠nimo, entregando solo el c√≥digo que el usuario necesita en el momento en que lo necesita.
                    </p>

                    <h3 class="text-xl font-semibold mt-6 mb-3">Reanudabilidad vs. Hidrataci√≥n üíß</h3>
                    <h4 class="text-lg font-semibold mt-6 mb-3">¬øQu√© es la Hidrataci√≥n? üíß</h4>
                    <p>
                        Imagina que est√°s construyendo una aplicaci√≥n web usando un framework tradicional como React o Vue. Cuando un usuario visita tu sitio, el servidor env√≠a el HTML pre-renderizado de la p√°gina al navegador. Sin embargo, este HTML por s√≠ solo no es interactivo; es como una foto est√°tica de tu aplicaci√≥n.
                    </p>
                    <p>
                        Para hacer que esa p√°gina sea interactiva (es decir, que los botones funcionen, que puedas escribir en los campos de texto, etc.), el navegador necesita descargar y ejecutar todo el JavaScript asociado a tu aplicaci√≥n. Este proceso de tomar el HTML est√°tico y "darle vida" en el navegador se llama <strong>hidrataci√≥n</strong>.
                    </p>
                    <h4 class="text-lg font-semibold mt-6 mb-3">Pasos en la hidrataci√≥n:</h4>
                    <ol class="list-decimal list-inside">
                        <li><strong>Descarga del HTML est√°tico</strong>: El navegador recibe el HTML generado por el servidor.</li>
                        <li><strong>Descarga del JavaScript</strong>: Se descarga todo el c√≥digo JavaScript necesario para la aplicaci√≥n.</li>
                        <li><strong>Ejecuci√≥n del JavaScript</strong>: El navegador ejecuta el JavaScript para reconstruir el estado de la aplicaci√≥n y adjuntar los manejadores de eventos.</li>
                        <li><strong>Interactividad</strong>: La p√°gina ahora es interactiva y el usuario puede interactuar con ella.</li>
                    </ol>
                    <h4 class="text-lg font-semibold mt-6 mb-3">Problemas con la hidrataci√≥n:</h4>
                    <ul class="list-disc list-inside">
                        <li><strong>Carga inicial lenta</strong>: Descargar y ejecutar todo el JavaScript desde el inicio puede hacer que la p√°gina tarde en ser interactiva, especialmente en conexiones lentas o dispositivos menos potentes.</li>
                        <li><strong>Duplicaci√≥n de trabajo</strong>: El servidor ya gener√≥ el HTML, pero el navegador necesita volver a procesar y recrear todo el estado de la aplicaci√≥n.</li>
                    </ul>

                    <h4 class="text-lg font-semibold mt-6 mb-3">¬øQu√© es la Reanudabilidad? üîÑ</h4>
                    <p>
                        Ahora, imagina un enfoque diferente. En lugar de tener que descargar y ejecutar todo el JavaScript para que la p√°gina sea interactiva, ¬øqu√© pasar√≠a si pudi√©ramos simplemente "reanudar" la aplicaci√≥n en el navegador exactamente donde el servidor la dej√≥? Aqu√≠ es donde entra el concepto de <strong>reanudabilidad</strong> que introduce Qwik.
                    </p>
                    <p>
                        <strong>Qwik</strong> permite que la aplicaci√≥n se inicie inmediatamente sin necesidad de cargar todo el JavaScript desde el principio. Solo cuando el usuario interact√∫a con la p√°gina, se descarga y ejecuta el c√≥digo necesario para esa interacci√≥n espec√≠fica.
                    </p>
                    <h4 class="text-lg font-semibold mt-6 mb-3">C√≥mo funciona la reanudabilidad:</h4>
                    <ol class="list-decimal list-inside">
                        <li><strong>Renderizado en el servidor con estado incluido</strong>: El servidor env√≠a el HTML con el estado de la aplicaci√≥n y los manejadores de eventos ya serializados en √©l.</li>
                        <li><strong>Carga m√≠nima en el cliente</strong>: El navegador recibe el HTML y muestra la p√°gina inmediatamente, sin necesidad de descargar todo el JavaScript.</li>
                        <li><strong>Interactividad bajo demanda</strong>: Cuando el usuario interact√∫a (por ejemplo, hace clic en un bot√≥n), el navegador descarga y ejecuta solo el c√≥digo JavaScript necesario para manejar esa interacci√≥n.</li>
                        <li><strong>Reanudaci√≥n del estado</strong>: La aplicaci√≥n contin√∫a desde el punto en que el servidor la dej√≥, sin tener que reconstruir todo el estado desde cero.</li>
                    </ol>
                    <h4 class="text-lg font-semibold mt-6 mb-3">Ventajas de la reanudabilidad:</h4>
                    <ul class="list-disc list-inside">
                        <li><strong>Inicio instant√°neo</strong>: La p√°gina es interactiva casi al instante, mejorando la experiencia del usuario.</li>
                        <li><strong>Menor uso de recursos</strong>: Se descarga y ejecuta menos JavaScript, lo que es ideal para dispositivos con recursos limitados.</li>
                        <li><strong>Carga progresiva</strong>: El c√≥digo se carga bajo demanda, optimizando el rendimiento de la aplicaci√≥n.</li>
                    </ul>

                    <h4 class="text-lg font-semibold mt-6 mb-3">Una Analog√≠a para Entenderlo Mejor üß†</h4>
                    <p>
                        <strong>Hidrataci√≥n</strong> es como si recibieras un libro en blanco (el HTML est√°tico) y tuvieras que escribir todo el contenido (ejecutar el JavaScript) antes de poder leerlo (interactuar con la p√°gina). Es un proceso que consume tiempo y esfuerzo antes de que puedas disfrutar del libro.
                    </p>
                    <p>
                        <strong>Reanudabilidad</strong> es como recibir el libro ya escrito y listo para leer, pero con cap√≠tulos adicionales que solo se te entregan si decides leerlos. No tienes que esperar ni trabajar m√°s; simplemente abres el libro y comienzas a leer, y si quieres m√°s detalles, los obtienes en el momento.
                    </p>

                    <h3 class="text-xl font-semibold mt-6 mb-3">Ventajas de usar Qwik üåü</h3>
                    <ul class="list-disc list-inside">
                        <li>
                            <strong>Carga ultrarr√°pida</strong>: Al retrasar la ejecuci√≥n y descarga de JavaScript, las aplicaciones se vuelven interactivas casi al instante. ‚ö°
                        </li>
                        <li>
                            <strong>JavaScript bajo demanda</strong>: Qwik utiliza "JavaScript Streaming", cargando los fragmentos de c√≥digo necesarios solo cuando el usuario interact√∫a con la aplicaci√≥n. üì∂
                        </li>
                        <li>
                            <strong>Escalabilidad</strong>: La cantidad de c√≥digo descargado es proporcional a la interacci√≥n del usuario, no al tama√±o total de la aplicaci√≥n. üìà
                        </li>
                        <li>
                            <strong>Experiencia de usuario mejorada</strong>: Menos tiempo de carga y respuesta m√°s r√°pida a las interacciones del usuario. üòä
                        </li>
                    </ul>

                    <h2 class="text-2xl font-semibold mt-8 mb-4">Combinando Qwik con Tailwind CSS üé®</h2>
                    <p>
                        Si Qwik es el motor que impulsa tu aplicaci√≥n, <strong>Tailwind CSS</strong> es el dise√±o aerodin√°mico que la hace atractiva y funcional. Tailwind es un framework de CSS utility-first que permite construir interfaces personalizadas de manera eficiente y sin escribir CSS personalizado.
                    </p>

                    {/* Continuar con el resto del art√≠culo */}

                    {/* ... */}

                    <p>---</p>

                    <p class="mt-8">
                        üí¨ <em>
                            ¬øHas tenido alguna experiencia con Qwik o Tailwind CSS? ¬°Comp√°rtela
                            en Twitter mencion√°ndome{' '}
                            <a
                            href="https://twitter.com/intent/tweet?text=He%20le√≠do%20el%20art√≠culo%20sobre%20Qwik%20y%20Tailwind%20de%20@sebacc920%20%23QwikTailwind&hashtags=QwikTailwind&via=sebacc920"
                            target="_blank"
                            rel="noopener noreferrer"
                            class="text-blue-500 hover:underline"
                            >
                            @sebacc92
                            </a>{' '}
                            y usando el hashtag{' '}
                            <a
                            href="https://twitter.com/intent/tweet?text=%23QwikTailwind&hashtags=QwikTailwind&via=sebacc920"
                            target="_blank"
                            rel="noopener noreferrer"
                            class="text-blue-500 hover:underline"
                            >
                            #QwikTailwind
                            </a>
                        </em>
                    </p>
                </article>
            </main>
            <Button
                look="link"
                class="mt-8"
            >
                <Link
                    href="/blog"
                    class="flex items-center"
                >
                    <LuArrowLeft class="h-5 w-5" />
                    <span>Volver al Blog</span>
                </Link>
            </Button>
        </>
    );
});

export const head: DocumentHead = {
    title: 'Construyendo Interfaces Ultrarr√°pidas con Qwik y Tailwind',
};
