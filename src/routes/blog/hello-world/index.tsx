import { component$ } from '@builder.io/qwik';
import { type DocumentHead } from '@builder.io/qwik-city';

export default component$(() => {
    return (
        <main class="mt-8 mx-auto max-w-3xl px-4">
            <article class="prose lg:prose-xl">
                <h1 class="text-4xl font-bold mb-4">üöÄ Construyendo Interfaces Ultrarr√°pidas con Qwik y Tailwind</h1>
                <p>
                    Si alguna vez has sentido que tus aplicaciones web podr√≠an ser m√°s r√°pidas, m√°s eficientes y ofrecer una mejor experiencia al usuario, est√°s en el lugar correcto. Hoy quiero compartir contigo mi experiencia con <strong>Qwik</strong>, un framework que est√° revolucionando la forma en que construimos interfaces de usuario, y c√≥mo combinarlo con <strong>Tailwind CSS</strong> puede llevar tus proyectos al siguiente nivel. üí°
                </p>

                <h2 class="text-2xl font-semibold mt-8 mb-4">¬øQu√© es Qwik y por qu√© deber√≠a importarte? ü§î</h2>
                <p>
                    Imagina un framework que te permita crear aplicaciones web de alto rendimiento sin tener que preocuparte por la carga inicial de JavaScript. <strong>Qwik</strong>, creado por Mi≈°ko Hevery (s√≠, el mismo detr√°s de Angular), Adam Bradley y Manu Almeida, es esa herramienta. Su objetivo principal es reducir la carga y ejecuci√≥n de JavaScript al m√≠nimo, entregando solo el c√≥digo que el usuario necesita en el momento en que lo necesita.
                </p>

                <h3 class="text-xl font-semibold mt-6 mb-3">Reanudabilidad vs. Hidrataci√≥n üíß</h3>
                <p>
                    La mayor√≠a de los frameworks modernos utilizan la hidrataci√≥n para hacer que las aplicaciones sean interactivas en el cliente. Esto implica cargar y ejecutar todo el JavaScript de la aplicaci√≥n, lo cual puede ser costoso en t√©rminos de tiempo y rendimiento. <strong>Qwik</strong> introduce el concepto de <em>reanudabilidad</em>, que permite pausar la ejecuci√≥n en el servidor y reanudarla en el cliente sin tener que volver a cargar y ejecutar todo el c√≥digo. üõë‚û°Ô∏è‚ñ∂Ô∏è
                </p>

                <h3 class="text-xl font-semibold mt-6 mb-3">Ventajas de usar Qwik üåü</h3>
                <ul class="list-disc list-inside">
                    <li>
                        <strong>Carga ultrarr√°pida</strong>: Al retrasar la ejecuci√≥n y descarga de JavaScript, las aplicaciones se vuelven interactivas casi al instante. ‚ö°
                    </li>
                    <li>
                        <strong>JavaScript bajo demanda</strong>: Qwik utiliza "JavaScript Streaming", cargando los fragmentos de c√≥digo necesarios solo cuando el usuario interact√∫a con la aplicaci√≥n. üì∂
                    </li>
                    <li>
                        <strong>Escalabilidad</strong>: La cantidad de c√≥digo descargado es proporcional a la interacci√≥n del usuario, no al tama√±o total de la aplicaci√≥n. üìà
                    </li>
                    <li>
                        <strong>Experiencia de usuario mejorada</strong>: Menos tiempo de carga y respuesta m√°s r√°pida a las interacciones del usuario. üòä
                    </li>
                </ul>

                <h2 class="text-2xl font-semibold mt-8 mb-4">Combinando Qwik con Tailwind CSS üé®</h2>
                <p>
                    Si Qwik es el motor que impulsa tu aplicaci√≥n, <strong>Tailwind CSS</strong> es el dise√±o aerodin√°mico que la hace atractiva y funcional. Tailwind es un framework de CSS utility-first que permite construir interfaces personalizadas de manera eficiente y sin escribir CSS personalizado.
                </p>

                <h3 class="text-xl font-semibold mt-6 mb-3">¬øPor qu√© Tailwind CSS? üßê</h3>
                <ul class="list-disc list-inside">
                    <li>
                        <strong>Productividad</strong>: Con clases predefinidas, puedes construir dise√±os complejos sin salir de tu HTML. ‚å®Ô∏è
                    </li>
                    <li>
                        <strong>Personalizaci√≥n</strong>: A diferencia de otros frameworks CSS, Tailwind no te limita con componentes prehechos; te da las herramientas para crear tu propio dise√±o. üé®
                    </li>
                    <li>
                        <strong>Consistencia</strong>: Facilita mantener un estilo coherente a lo largo de toda la aplicaci√≥n. üß©
                    </li>
                </ul>

                <h2 class="text-2xl font-semibold mt-8 mb-4">Manos a la obra: Construyendo una aplicaci√≥n ultrarr√°pida üõ†Ô∏è</h2>

                <h3 class="text-xl font-semibold mt-6 mb-3">Paso 1: Configuraci√≥n del proyecto üèÅ</h3>
                <p>
                    Primero, necesitamos configurar nuestro entorno con Qwik y Tailwind CSS. Afortunadamente, Qwik cuenta con herramientas que facilitan este proceso.
                </p>
                <pre class="bg-gray-100 p-4 rounded-md overflow-x-auto">
                    <code class="language-bash">
                        npm create qwik@latest
                        <br />
                        cd mi-app-ultrarrapida
                        <br />
                        npm install
                    </code>
                </pre>

                <h3 class="text-xl font-semibold mt-6 mb-3">Paso 2: Integrando Tailwind CSS üåê</h3>
                <p>
                    Dentro de tu proyecto Qwik, instala Tailwind CSS y sus dependencias.
                </p>
                <pre class="bg-gray-100 p-4 rounded-md overflow-x-auto">
                    <code class="language-bash">
                        npm install -D tailwindcss postcss autoprefixer
                        <br />
                        npx tailwindcss init
                    </code>
                </pre>
                <p>
                    Configura Tailwind para que funcione con Qwik modificando los archivos{' '}
                    <code class="bg-gray-200 px-1 rounded">tailwind.config.js</code> y{' '}
                    <code class="bg-gray-200 px-1 rounded">postcss.config.js</code> seg√∫n sea necesario.
                </p>

                <h3 class="text-xl font-semibold mt-6 mb-3">Paso 3: Creando componentes reanudables üîÑ</h3>
                <p>
                    Con Qwik, los componentes se crean de manera similar a otros frameworks, pero con una diferencia clave: el uso de la funci√≥n{' '}
                    <code class="bg-gray-200 px-1 rounded">component$</code>.
                </p>
                <pre class="bg-gray-100 p-4 rounded-md overflow-x-auto">
                    <code data-language="jsx" data-theme="Sprinkles Dark Sprinkles Light">
                        import {'{ component$ }'} from '@builder.io/qwik';

                        <br />
                        <br />
                        export const MiComponente = component$(() => {'{'}
                        <br />
                        &nbsp;&nbsp;return (
                        <br />
                        &nbsp;&nbsp;&nbsp;&nbsp;&lt;div&gt;
                        <br />
                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;h1 class="text-2xl font-bold"&gt;¬°Hola, mundo!&lt;/h1&gt;
                        <br />
                        &nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;
                        <br />
                        &nbsp;&nbsp;);
                        <br />
                        {'}'}); 
                    </code>
                </pre>

                <p>
                    El sufijo <code class="bg-gray-200 px-1 rounded">$</code> indica que el componente es reanudable y puede ser cargado de forma diferida.
                </p>

                <h3 class="text-xl font-semibold mt-6 mb-3">Paso 4: A√±adiendo interactividad inteligente üß†</h3>
                <p>
                    Gracias a la reactividad de Qwik, podemos manejar el estado de nuestra aplicaci√≥n de forma eficiente.
                </p>
                <pre class="bg-gray-100 p-4 rounded-md overflow-x-auto">
                    <code class="language-jsx">
                        import {'{ component$, useSignal }'} from '@builder.io/qwik';

                        <br />
                        <br />
                        export const Contador = component$(() => {'{'}
                        <br />
                        &nbsp;&nbsp;const count = useSignal(0);
                        <br />
                        <br />
                        &nbsp;&nbsp;return (
                        <br />
                        &nbsp;&nbsp;&nbsp;&nbsp;&lt;button
                        <br />
                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;class="px-4 py-2 bg-blue-500 text-white rounded"
                        <br />
                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onClick${'() => count.value++'}
                        <br />
                        &nbsp;&nbsp;&nbsp;&nbsp;&gt;
                        <br />
                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Contador: {'{count.value}'}
                        <br />
                        &nbsp;&nbsp;&nbsp;&nbsp;&lt;/button&gt;
                        <br />
                        &nbsp;&nbsp;);
                        <br />
                        {'}'}); 
                    </code>
                </pre>

                <p>
                    En este ejemplo, el estado <code class="bg-gray-200 px-1 rounded">count</code> se actualiza solo cuando es necesario, y Qwik se encarga de minimizar la cantidad de c√≥digo JavaScript que se descarga y ejecuta.
                </p>

                <h2 class="text-2xl font-semibold mt-8 mb-4">Beneficios reales en rendimiento üèéÔ∏è</h2>
                <p>
                    Al implementar una aplicaci√≥n con Qwik y Tailwind, notar√°s mejoras significativas en:
                </p>
                <ul class="list-disc list-inside">
                    <li>
                        <strong>Tiempo de carga inicial</strong>: La aplicaci√≥n es interactiva m√°s r√°pidamente, incluso en dispositivos m√≥viles con conexiones lentas. üì≤
                    </li>
                    <li>
                        <strong>Respuesta a la interacci√≥n del usuario</strong>: Solo se descarga y ejecuta el c√≥digo necesario para la acci√≥n espec√≠fica del usuario. üéØ
                    </li>
                    <li>
                        <strong>Optimizaci√≥n para SEO</strong>: Mejores tiempos de carga pueden mejorar tu posici√≥n en los resultados de b√∫squeda. üîç
                    </li>
                </ul>

                <h2 class="text-2xl font-semibold mt-8 mb-4">Despedida a la hidrataci√≥n tradicional üëã</h2>
                <p>
                    La hidrataci√≥n es como tratar de encender un cohete con f√≥sforos mojados: consume tiempo y recursos. Con Qwik, nos despedimos de ese enfoque y damos la bienvenida a una forma m√°s eficiente de construir aplicaciones web. üöÄ
                </p>

                <h2 class="text-2xl font-semibold mt-8 mb-4">Conclusi√≥n üìù</h2>
                <p>
                    La combinaci√≥n de <strong>Qwik</strong> y <strong>Tailwind CSS</strong> ofrece una potente herramienta para desarrollar aplicaciones web ultrarr√°pidas y centradas en la experiencia del usuario. Al adoptar este enfoque, no solo optimizas el rendimiento, sino que tambi√©n te posicionas a la vanguardia de las tecnolog√≠as web emergentes. üåê
                </p>
                <p>
                    Si est√°s buscando llevar tus habilidades al siguiente nivel y construir aplicaciones que destaquen por su velocidad y eficiencia, te animo a que le des una oportunidad a Qwik. Qui√©n sabe, tal vez descubras que es la pieza que faltaba en tu caja de herramientas de desarrollo. üß∞
                </p>

                <p>---</p>

                <p class="mt-8">
                    üí¨ <em>¬øHas tenido alguna experiencia con Qwik o Tailwind CSS? ¬°Me encantar√≠a leer tus comentarios y experiencias!</em>
                </p>
            </article>
        </main>
    );
});

export const head: DocumentHead = {
    title: 'Construyendo Interfaces Ultrarr√°pidas con Qwik y Tailwind',
};
