import { component$ } from '@builder.io/qwik';
import { type DocumentHead, Link } from '@builder.io/qwik-city';
import { LuArrowLeft } from '@qwikest/icons/lucide';
import { Button } from '~/components/ui';

export default component$(() => {
    return (
        <main class="mt-8 mx-auto max-w-3xl px-4">
            <Button look="link" class="mb-8">
                <Link href="/blog" class="flex items-center">
                    <LuArrowLeft class="h-5 w-5" />
                    <span>Volver al Blog</span>
                </Link>
            </Button>
            <article class="prose lg:prose-xl">
                <h1 class="text-4xl font-bold mb-4">
                    ‚ú® Mi Experiencia con Qwik: Innovando en el Frontend
                </h1>
                <p>
                    El mundo del desarrollo frontend est√° en constante evoluci√≥n, y siempre estoy en busca de herramientas que me permitan crear aplicaciones m√°s r√°pidas y eficientes. Hace unos meses, descubr√≠ <strong>Qwik</strong>, un framework que promete revolucionar la forma en que construimos aplicaciones web. Hoy quiero compartir mi experiencia con Qwik y c√≥mo ha cambiado mi perspectiva sobre el desarrollo frontend. üöÄ
                </p>

                <h2 class="text-2xl font-semibold mt-8 mb-4">Primeros Pasos con Qwik üõ†Ô∏è</h2>
                <p>
                    Al comenzar con Qwik, lo primero que not√© fue su enfoque en la <strong>reanudabilidad</strong>. A diferencia de otros frameworks, Qwik permite que las aplicaciones se inicien r√°pidamente al cargar solo el HTML y el CSS necesarios, retrasando la carga de JavaScript hasta que sea realmente necesario.
                </p>
                <p>
                    Para iniciar un nuevo proyecto, utilic√© el comando oficial:
                </p>
                <pre class="bg-gray-100 p-4 rounded-md overflow-x-auto">
                    <code class="language-bash">
                        {`npm create qwik@latest
cd mi-proyecto-qwik
npm install`}
                    </code>
                </pre>
                <p>
                    La estructura del proyecto es limpia y est√° bien organizada, lo que facilita la comprensi√≥n y el inicio del desarrollo.
                </p>

                <h2 class="text-2xl font-semibold mt-8 mb-4">Creando Componentes Reanudables üîÑ</h2>
                <p>
                    Una de las caracter√≠sticas m√°s interesantes de Qwik es la funci√≥n <code class="bg-gray-200 px-1 rounded">component$</code>, que permite crear componentes reanudables que se cargan bajo demanda.
                </p>
                <p>Ejemplo de un componente b√°sico:</p>
                <pre class="bg-gray-100 p-4 rounded-md overflow-x-auto">
                    <code class="language-tsx">
                        {`import { component$ } from '@builder.io/qwik';

export const Saludo = component$(() => {
  return <h1>¬°Hola, Qwik!</h1>;
});`}
                    </code>
                </pre>
                <p>
                    El sufijo <code class="bg-gray-200 px-1 rounded">$</code> indica que el componente es reanudable y puede ser dividido para su carga diferida.
                </p>

                <h2 class="text-2xl font-semibold mt-8 mb-4">Estado y Reactividad con Signals üì°</h2>
                <p>
                    Qwik introduce las <strong>signals</strong> para manejar el estado de manera eficiente. Las signals son referencias reactivas que notifican a los componentes cuando su valor cambia.
                </p>
                <p>Ejemplo de contador utilizando signals:</p>
                <pre class="bg-gray-100 p-4 rounded-md overflow-x-auto">
                    <code class="language-tsx">
                        {`import { component$, useSignal } from '@builder.io/qwik';

export const Contador = component$(() => {
  const count = useSignal(0);

  return (
    <button
      class="px-4 py-2 bg-green-500 text-white rounded"
      onClick$={() => count.value++}
    >
      Contador: {count.value}
    </button>
  );
});`}
                    </code>
                </pre>
                <p>
                    En este ejemplo, el estado se actualiza sin necesidad de re-renderizar todo el componente, lo que mejora el rendimiento.
                </p>

                <h2 class="text-2xl font-semibold mt-8 mb-4">Integraci√≥n con Tailwind CSS üé®</h2>
                <p>
                    Para estilizar mi aplicaci√≥n, integr√© <strong>Tailwind CSS</strong>, aprovechando su enfoque utility-first para crear dise√±os modernos y responsivos.
                </p>
                <p>
                    La configuraci√≥n fue sencilla y me permiti√≥ aplicar clases directamente en los componentes de Qwik.
                </p>
                <p>Ejemplo de componente estilizado:</p>
                <pre class="bg-gray-100 p-4 rounded-md overflow-x-auto">
                    <code class="language-tsx">
                        {`import { component$ } from '@builder.io/qwik';

export const Tarjeta = component$(() => {
  return (
    <div class="max-w-sm rounded overflow-hidden shadow-lg">
      <img class="w-full" src="/img/tarjeta.jpg" alt="Imagen de la tarjeta" />
      <div class="px-6 py-4">
        <div class="font-bold text-xl mb-2">T√≠tulo de la Tarjeta</div>
        <p class="text-gray-700 text-base">
          Esta es una tarjeta de ejemplo utilizando Qwik y Tailwind CSS.
        </p>
      </div>
    </div>
  );
});`}
                    </code>
                </pre>

                <h2 class="text-2xl font-semibold mt-8 mb-4">Comparaci√≥n con Otros Frameworks ‚öñÔ∏è</h2>
                <p>
                    Al comparar Qwik con otros frameworks como React, Angular o Vue, not√© que Qwik se enfoca m√°s en la <strong>performance</strong> y la <strong>carga diferida</strong> de componentes. Mientras que otros frameworks requieren la carga completa del bundle JavaScript al inicio, Qwik retrasa la carga de c√≥digo hasta que es realmente necesario, lo que mejora significativamente el tiempo de carga inicial.
                </p>
                <p>
                    Adem√°s, la sintaxis de Qwik es similar a la de React, lo que facilita la transici√≥n para desarrolladores familiarizados con JSX. Sin embargo, el concepto de reanudabilidad y las signals son caracter√≠sticas √∫nicas que requieren un cambio de mentalidad.
                </p>

                <h2 class="text-2xl font-semibold mt-8 mb-4">Casos de Uso y Aplicaciones Pr√°cticas üìù</h2>
                <p>
                    Qwik es especialmente √∫til en aplicaciones donde el <strong>rendimiento</strong> y el <strong>tiempo de carga</strong> son cr√≠ticos. Por ejemplo:
                </p>
                <ul class="list-disc list-inside">
                    <li>
                        <strong>Sitios web de alto tr√°fico</strong>: Donde cada milisegundo cuenta para retener a los usuarios.
                    </li>
                    <li>
                        <strong>Aplicaciones m√≥viles web</strong>: En dispositivos con recursos limitados o conexiones lentas.
                    </li>
                    <li>
                        <strong>P√°ginas de destino (landing pages)</strong>: Que requieren tiempos de carga ultrarr√°pidos para mejorar las conversiones.
                    </li>
                </ul>
                <p>
                    En uno de mis proyectos, migr√© una landing page de React a Qwik y not√© una reducci√≥n significativa en el tiempo de carga, lo que mejor√≥ la tasa de conversi√≥n en un 15%.
                </p>

                <h2 class="text-2xl font-semibold mt-8 mb-4">Mejoras en la Experiencia de Desarrollo üíª</h2>
                <p>
                    Qwik ofrece una excelente experiencia de desarrollo con herramientas integradas y soporte para TypeScript. Algunas de las mejoras que apreci√© fueron:
                </p>
                <ul class="list-disc list-inside">
                    <li>
                        <strong>Hot Module Replacement (HMR)</strong>: Permite ver los cambios en tiempo real sin recargar la p√°gina.
                    </li>
                    <li>
                        <strong>Integraci√≥n con VSCode</strong>: Soporte para autocompletado y linting, lo que acelera el desarrollo.
                    </li>
                    <li>
                        <strong>Debugging sencillo</strong>: Gracias a su estructura clara y herramientas de desarrollo.
                    </li>
                </ul>

                <h2 class="text-2xl font-semibold mt-8 mb-4">Retos Encontrados üßê</h2>
                <p>
                    No todo fue perfecto; tambi√©n encontr√© algunos desaf√≠os:
                </p>
                <ul class="list-disc list-inside">
                    <li>
                        <strong>Documentaci√≥n limitada</strong>: Si bien la documentaci√≥n oficial es √∫til, a√∫n est√° en crecimiento y puede faltar informaci√≥n detallada.
                    </li>
                    <li>
                        <strong>Comunidad emergente</strong>: Al ser relativamente nuevo, la comunidad es peque√±a en comparaci√≥n con otros frameworks m√°s establecidos.
                    </li>
                    <li>
                        <strong>Integraci√≥n con librer√≠as</strong>: Algunas librer√≠as no est√°n optimizadas para funcionar con Qwik, lo que puede requerir soluciones alternativas.
                    </li>
                    <li>
                        <strong>Aprendizaje de nuevos conceptos</strong>: La reanudabilidad y las signals son conceptos nuevos que pueden requerir tiempo para dominar.
                    </li>
                </ul>

                <h2 class="text-2xl font-semibold mt-8 mb-4">El Futuro de Qwik üöÄ</h2>
                <p>
                    Qwik est√° en constante desarrollo y promete seguir innovando en el mundo del frontend. Con el creciente enfoque en la performance web, creo que Qwik tiene el potencial de convertirse en una herramienta clave para desarrolladores y empresas que buscan optimizar sus aplicaciones.
                </p>
                <p>
                    Estoy entusiasmado por ver c√≥mo evoluciona y qu√© nuevas caracter√≠sticas se incorporar√°n en el futuro. La posibilidad de una comunidad m√°s grande y m√°s recursos har√° que sea a√∫n m√°s accesible para todos.
                </p>

                <h2 class="text-2xl font-semibold mt-8 mb-4">Conclusiones Finales üéØ</h2>
                <p>
                    Mi experiencia con Qwik ha sido en general positiva. Su enfoque innovador en la reanudabilidad y la optimizaci√≥n del rendimiento lo convierten en una opci√≥n interesante para desarrolladores que buscan nuevas formas de mejorar sus aplicaciones.
                </p>
                <p>
                    Aunque a√∫n tiene √°reas por madurar, estoy entusiasmado con su potencial y planeo seguir explor√°ndolo en futuros proyectos. Si buscas una alternativa fresca y est√°s dispuesto a experimentar, te animo a darle una oportunidad a Qwik. ¬°Podr√≠a ser justo lo que necesitas para llevar tus habilidades al siguiente nivel! ‚ú®
                </p>

                <p>---</p>

                <p class="mt-8">
                    üí¨{' '}
                    <em>
                        ¬øHas probado Qwik? ¬øQu√© opinas de su enfoque? ¬°Comp√°rtelo en Twitter mencion√°ndome{' '}
                        <a
                            href="https://twitter.com/intent/tweet?text=Mi%20experiencia%20con%20Qwik%20es...&hashtags=QwikFramework&via=sebacc92"
                            target="_blank"
                            rel="noopener noreferrer"
                            class="text-blue-500 hover:underline"
                        >
                            @sebacc92
                        </a>{' '}
                        y usando el hashtag{' '}
                        <a
                            href="https://twitter.com/intent/tweet?text=%23QwikFramework&hashtags=QwikFramework&via=sebacc92"
                            target="_blank"
                            rel="noopener noreferrer"
                            class="text-blue-500 hover:underline"
                        >
                            #QwikFramework
                        </a>
                        !
                    </em>
                </p>
            </article>
            <Button look="link" class="my-8">
                <Link href="/blog" class="flex items-center">
                    <LuArrowLeft class="h-5 w-5" />
                    <span>Volver al Blog</span>
                </Link>
            </Button>
        </main>
    );
});

export const head: DocumentHead = {
    title: 'Mi Experiencia con Qwik: Innovando en el Frontend',
};
